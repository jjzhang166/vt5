// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "vtslider.h"

// Dispatch interfaces referenced by this interface
#include "Font.h"

/////////////////////////////////////////////////////////////////////////////
// CVTSlider

IMPLEMENT_DYNCREATE(CVTSlider, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CVTSlider properties

long CVTSlider::GetMin()
{
	long result;
	GetProperty(0x1, VT_I4, (void*)&result);
	return result;
}

void CVTSlider::SetMin(long propVal)
{
	SetProperty(0x1, VT_I4, propVal);
}

long CVTSlider::GetMax()
{
	long result;
	GetProperty(0x2, VT_I4, (void*)&result);
	return result;
}

void CVTSlider::SetMax(long propVal)
{
	SetProperty(0x2, VT_I4, propVal);
}

BOOL CVTSlider::GetShowTick()
{
	BOOL result;
	GetProperty(0x4, VT_BOOL, (void*)&result);
	return result;
}

void CVTSlider::SetShowTick(BOOL propVal)
{
	SetProperty(0x4, VT_BOOL, propVal);
}

short CVTSlider::GetTickFreq()
{
	short result;
	GetProperty(0x5, VT_I2, (void*)&result);
	return result;
}

void CVTSlider::SetTickFreq(short propVal)
{
	SetProperty(0x5, VT_I2, propVal);
}

long CVTSlider::GetPosLo()
{
	long result;
	GetProperty(0x6, VT_I4, (void*)&result);
	return result;
}

void CVTSlider::SetPosLo(long propVal)
{
	SetProperty(0x6, VT_I4, propVal);
}

long CVTSlider::GetPosHi()
{
	long result;
	GetProperty(0x7, VT_I4, (void*)&result);
	return result;
}

void CVTSlider::SetPosHi(long propVal)
{
	SetProperty(0x7, VT_I4, propVal);
}

BOOL CVTSlider::GetShowNums()
{
	BOOL result;
	GetProperty(0x8, VT_BOOL, (void*)&result);
	return result;
}

void CVTSlider::SetShowNums(BOOL propVal)
{
	SetProperty(0x8, VT_BOOL, propVal);
}

COleFont CVTSlider::GetFont()
{
	LPDISPATCH pDispatch;
	GetProperty(DISPID_FONT, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CVTSlider::SetFont(LPDISPATCH propVal)
{
	SetProperty(DISPID_FONT, VT_DISPATCH, propVal);
}

BOOL CVTSlider::GetEnabled()
{
	BOOL result;
	GetProperty(DISPID_ENABLED, VT_BOOL, (void*)&result);
	return result;
}

void CVTSlider::SetEnabled(BOOL propVal)
{
	SetProperty(DISPID_ENABLED, VT_BOOL, propVal);
}

BOOL CVTSlider::GetCycled()
{
	BOOL result;
	GetProperty(0x3, VT_BOOL, (void*)&result);
	return result;
}

void CVTSlider::SetCycled(BOOL propVal)
{
	SetProperty(0x3, VT_BOOL, propVal);
}

BOOL CVTSlider::GetAutoUpdate()
{
	BOOL result;
	GetProperty(0x9, VT_BOOL, (void*)&result);
	return result;
}

void CVTSlider::SetAutoUpdate(BOOL propVal)
{
	SetProperty(0x9, VT_BOOL, propVal);
}

CString CVTSlider::GetLowKeyValue()
{
	CString result;
	GetProperty(0xa, VT_BSTR, (void*)&result);
	return result;
}

void CVTSlider::SetLowKeyValue(LPCTSTR propVal)
{
	SetProperty(0xa, VT_BSTR, propVal);
}

CString CVTSlider::GetHighKeyValue()
{
	CString result;
	GetProperty(0xb, VT_BSTR, (void*)&result);
	return result;
}

void CVTSlider::SetHighKeyValue(LPCTSTR propVal)
{
	SetProperty(0xb, VT_BSTR, propVal);
}

CString CVTSlider::GetName()
{
	CString result;
	GetProperty(0xc, VT_BSTR, (void*)&result);
	return result;
}

void CVTSlider::SetName(LPCTSTR propVal)
{
	SetProperty(0xc, VT_BSTR, propVal);
}

BOOL CVTSlider::GetInnerRaised()
{
	BOOL result;
	GetProperty(0xd, VT_BOOL, (void*)&result);
	return result;
}

void CVTSlider::SetInnerRaised(BOOL propVal)
{
	SetProperty(0xd, VT_BOOL, propVal);
}

BOOL CVTSlider::GetInnerSunken()
{
	BOOL result;
	GetProperty(0xe, VT_BOOL, (void*)&result);
	return result;
}

void CVTSlider::SetInnerSunken(BOOL propVal)
{
	SetProperty(0xe, VT_BOOL, propVal);
}

BOOL CVTSlider::GetOuterRaised()
{
	BOOL result;
	GetProperty(0xf, VT_BOOL, (void*)&result);
	return result;
}

void CVTSlider::SetOuterRaised(BOOL propVal)
{
	SetProperty(0xf, VT_BOOL, propVal);
}

BOOL CVTSlider::GetOuterSunken()
{
	BOOL result;
	GetProperty(0x10, VT_BOOL, (void*)&result);
	return result;
}

void CVTSlider::SetOuterSunken(BOOL propVal)
{
	SetProperty(0x10, VT_BOOL, propVal);
}

BOOL CVTSlider::GetSingleSlide()
{
	BOOL result;
	GetProperty(0x11, VT_BOOL, (void*)&result);
	return result;
}

void CVTSlider::SetSingleSlide(BOOL propVal)
{
	SetProperty(0x11, VT_BOOL, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CVTSlider operations

void CVTSlider::SetBothLimits(long nLow, long nHigh)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x12, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nLow, nHigh);
}

void CVTSlider::StoreToData()
{
	InvokeHelper(0x13, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVTSlider::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
